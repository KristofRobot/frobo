<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from frobo.urdf.xacro               | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="frobo" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!-- The following included files set up definitions of parts of the robot body -->
  <!-- Import all Gazebo-customization elements, including Gazebo colors -->
  <gazebo reference="base_link">
    <material>Gazebo/Orange</material>
  </gazebo>
  <gazebo reference="head_camera_depth_frame">
    <material>Gazebo/Black</material>
    <sensor name="head_camera" type="depth">
      <update_rate>5</update_rate>
      <camera>
        <horizontal_fov>1.0471975512</horizontal_fov>
        <image>
          <format>R8G8B8</format>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>0.05</near>
          <far>3</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_depth_camera.so" name="head_camera_camera_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>5</updateRate>
        <cameraName>head_camera</cameraName>
        <imageTopicName>rgb/image_raw</imageTopicName>
        <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
        <depthImageTopicName>depth/image_raw</depthImageTopicName>
        <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
        <pointCloudTopicName>depth/points</pointCloudTopicName>
        <frameName>head_camera_depth_optical_frame</frameName>
        <pointCloudCutoff>0.4</pointCloudCutoff>
        <distortion_k1>0.0</distortion_k1>
        <distortion_k2>0.0</distortion_k2>
        <distortion_k3>0.0</distortion_k3>
        <distortion_t1>0.0</distortion_t1>
        <distortion_t2>0.0</distortion_t2>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo reference="lidar_link">
    <material>Gazebo/Black</material>
    <sensor name="head_lidar_sensor" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>5</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1</resolution>
            <min_angle>0</min_angle>
            <max_angle>6.28318530718</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.06</min>
          <max>5.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin filename="libgazebo_ros_laser.so" name="gazebo_ros_head_lidar_controller">
        <topicName>/scan</topicName>
        <frameName>lidar_link</frameName>
      </plugin>
    </sensor>
  </gazebo>
  <!-- Import Rviz colors -->
  <material name="Black">
    <color rgba="0.2 0.2 0.2 1.0"/>
  </material>
  <material name="Orange">
    <color rgba="1.0  0.55 0.0 1.0"/>
  </material>
  <material name="Brown">
    <color rgba="0.55  0.35 0.15 1.0"/>
  </material>
  <material name="Grey">
    <color rgba="0.75 0.75 0.75 1.0"/>
  </material>
  <material name="Red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  <material name="White">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>
  <material name="Blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>
  <!-- Now we can start using the macros included above to define the actual Frobo -->
  <link name="base_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0.074"/>
      <geometry>
        <!-- <mesh filename="package://frobo_description/meshes/base.stl"  /> -->
        <cylinder length="0.006" radius="0.15"/>
      </geometry>
      <material name="Brown"/>
    </visual>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0.18"/>
      <geometry>
        <cylinder length="0.006" radius="0.15"/>
      </geometry>
      <material name="Brown"/>
    </visual>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0.24"/>
      <geometry>
        <cylinder length="0.006" radius="0.15"/>
      </geometry>
      <material name="Brown"/>
    </visual>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0.305"/>
      <geometry>
        <cylinder length="0.006" radius="0.15"/>
      </geometry>
      <material name="Brown"/>
    </visual>
    <!-- fixed wheels, without tf transform, just for visualization -->
    <visual>
      <origin rpy="1.57 0 0" xyz="0 0.116 0.06191"/>
      <geometry>
        <cylinder length="0.02032" radius="0.06191"/>
      </geometry>
      <material name="Orange"/>
    </visual>
    <visual>
      <origin rpy="1.57 0 0" xyz="0 -0.116 0.06191"/>
      <geometry>
        <cylinder length="0.02032" radius="0.06191"/>
      </geometry>
      <material name="Orange"/>
    </visual>
    <!-- fixed swivel, without tf transform, just for visualization -->
    <!--
      <visual>
        <origin xyz="-${wheel_offset_y} 0 ${swivel_radius}" rpy="1.57 0 0" />
        <geometry>
          <cylinder radius="${swivel_radius}" length="${swivel_length}"/>
        </geometry>
        <material name="Grey" />
      </visual> 
      -->
    <!-- split collision object of base in two, one below lidar, and one on top lidar
      to keep lidar free for object detection (otherwise it would be blocked by collision object) -->
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0.12"/>
      <geometry>
        <cylinder length="0.24" radius="0.2"/>
      </geometry>
    </collision>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0.355"/>
      <geometry>
        <cylinder length="0.1" radius="0.2"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.15"/>
      <mass value="5"/>
      <inertia ixx="10e-3" ixy="0.0" ixz="0.0" iyy="10e-3" iyz="0.0" izz="10e-3"/>
    </inertial>
  </link>
  <joint name="base_fr_sonar_joint" type="fixed">
    <origin rpy="0 0 -0.6" xyz="0.115 -0.055 0.054"/>
    <parent link="base_link"/>
    <child link="base_fr_sonar_link"/>
  </joint>
  <link name="base_fr_sonar_link">
    <visual>
      <origin rpy="-1.57 0 1.57" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://frobo_description/meshes/sonar.stl"/>
      </geometry>
      <material name="Blue"/>
    </visual>
  </link>
  <joint name="base_fc_sonar_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.125 0 0.054"/>
    <parent link="base_link"/>
    <child link="base_fc_sonar_link"/>
  </joint>
  <link name="base_fc_sonar_link">
    <visual>
      <origin rpy="-1.57 0 1.57" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://frobo_description/meshes/sonar.stl"/>
      </geometry>
      <material name="Blue"/>
    </visual>
  </link>
  <joint name="base_fl_sonar_joint" type="fixed">
    <origin rpy="0 0 0.6" xyz="0.115 0.055 0.054"/>
    <parent link="base_link"/>
    <child link="base_fl_sonar_link"/>
  </joint>
  <link name="base_fl_sonar_link">
    <visual>
      <origin rpy="-1.57 0 1.57" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://frobo_description/meshes/sonar.stl"/>
      </geometry>
      <material name="Blue"/>
    </visual>
  </link>
  <!-- Camera -->
  <joint name="head_camera_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0.35"/>
    <parent link="base_link"/>
    <child link="head_camera_link"/>
  </joint>
  <link name="head_camera_link">
    <inertial_sphere diameter="0.07" mass="0.01"/>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://frobo_description/meshes/kinect_camera_simple.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://frobo_description/meshes/kinect_camera_simple.stl"/>
      </geometry>
    </collision>
  </link>
  <joint name="head_camera_depth_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.0 -0.02 0.0"/>
    <parent link="head_camera_link"/>
    <child link="head_camera_depth_frame"/>
  </joint>
  <link name="head_camera_depth_frame"/>
  <joint name="head_camera_depth_optical_joint" type="fixed">
    <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/>
    <parent link="head_camera_depth_frame"/>
    <child link="head_camera_depth_optical_frame"/>
  </joint>
  <link name="head_camera_depth_optical_frame"/>
  <joint name="head_camera_rgb_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.0 -0.0125 0.0"/>
    <parent link="head_camera_link"/>
    <child link="head_camera_rgb_frame"/>
  </joint>
  <link name="head_camera_rgb_frame"/>
  <joint name="head_camera_rgb_optical_joint" type="fixed">
    <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/>
    <parent link="head_camera_rgb_frame"/>
    <child link="head_camera_rgb_optical_frame"/>
  </joint>
  <link name="head_camera_rgb_optical_frame"/>
  <!-- Lidar -->
  <joint name="lidar_joint" type="fixed">
    <origin rpy="0 0 0" xyz="-0.02 0 0.285"/>
    <parent link="base_link"/>
    <child link="lidar_link"/>
  </joint>
  <link name="lidar_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 -0.01718"/>
      <geometry>
        <!-- <mesh filename="package://frobo_description/meshes/lidar.stl" /> -->
        <cylinder length="0.05211" radius="0.05"/>
      </geometry>
      <material name="Black"/>
    </visual>
  </link>
  <!-- extensions -->
  <gazebo>
    <plugin filename="libgazebo_ros_planar_move.so" name="object_controller">
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <odometryRate>10.0</odometryRate>
      <robotBaseFrame>base_link</robotBaseFrame>
    </plugin>
  </gazebo>
  <gazebo reference="base_link">
    <gravity>true</gravity>
    <selfCollide>true</selfCollide>
  </gazebo>
</robot>
